name: Deploy and Trigger on Version Change

on:
  push:
    branches: [main]

jobs:
  read-and-detect-versions:
    runs-on: ubuntu-latest
    outputs:
      changed_matrix: ${{ steps.collect-changes.outputs.changed_matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read versions from file
        id: get-versions
        run: |
          echo "Reading versions from versions.json"
          matrix=$(jq -c 'to_entries | map({service: .key, version: .value})' versions.json)
          echo "::set-output name=matrix::$matrix"

      - name: Get previous commit hash
        id: previous_commit
        run: |
          previous_commit_hash=$(git log --pretty=format:%H -n 2 | tail -n 1)
          echo "::set-output name=commit_hash::${previous_commit_hash}"

      - name: Check for version changes
        id: check-versions
        run: |
          matrix=${{ steps.get-versions.outputs.matrix }}
          echo $matrix
          changed_matrix='[]'
          echo "$matrix" | jq -c '.[]' | while read -r service_version; do
            service=$(echo "$service_version" | jq -r '.service')
            current_version=$(echo "$service_version" | jq -r '.version')
            previous_version=$(git show ${{ steps.previous_commit.outputs.commit_hash }}:versions.json | jq -r --arg service "$service" '.[$service]')
            
            if [[ "$current_version" != "$previous_version" ]]; then
              changed_matrix=$(echo "$changed_matrix" | jq --argjson obj "{\"service\": \"$service\", \"version\": \"$current_version\"}" '. + [$obj]')
            fi
          done
          echo $changed_matrix
          echo "::set-output name=changed_matrix::$changed_matrix"

      - name: Log changed matrix
        run: |
          echo "Changed Matrix: ${{ steps.check-versions.outputs.changed_matrix }}"

  process-versions:
    needs: read-and-detect-versions
    if: ${{ needs.read-and-detect-versions.outputs.changed_matrix != '[]' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Process each service
        run: |
          echo "Processing each service in changed matrix"
          changed_matrix=${{ needs.read-and-detect-versions.outputs.changed_matrix }}
          echo "$changed_matrix" | jq -c '.[]' | while read -r service_version; do
            service=$(echo "$service_version" | jq -r '.service')
            version=$(echo "$service_version" | jq -r '.version')
            echo "Processing service: $service with version: $version"
            
            # Place your steps here to process each service
            echo "Triggering workflow for $service with version $version"
            gh workflow run blank.yml -r soringumeni1/multiple-env-poc -f env="preprod" -f tag_version="$version" -f service="$service"
          done
