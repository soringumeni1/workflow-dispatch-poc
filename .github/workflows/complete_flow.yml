name: Deploy and Trigger on Version Change

on:
  push:
    branches: [main]

jobs:
  read-and-detect-versions:
    runs-on: ubuntu-latest
    outputs:
      changed_services: ${{ steps.collect-changes.outputs.changed_services }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read versions from file
        id: get-versions
        run: |
          echo "Reading versions from versions.json"
          matrix=$(jq -c 'to_entries | map({service: .key, version: .value})' versions.json)
          echo "::set-output name=matrix::$matrix"

      - name: Log matrix
        run: |
          echo "Matrix: :${{ steps.get-versions.outputs.matrix }}"

      - name: Get previous commit hash
        id: previous_commit
        run: |
          previous_commit_hash=$(git log --pretty=format:%H -n 2 | tail -n 1)
          echo "::set-output name=commit_hash::${previous_commit_hash}"

      - name: Get current and previous versions
        id: check-versions
        run: |
          echo "Checking version changes"
          echo ${{ steps.get-versions.outputs.matrix }} | jq -c '.[]' | while read service_version; do
            service=$(echo $service_version | jq -r '.service')
            current_version=$(echo $service_version | jq -r '.version')
            previous_version=$(git show ${{ steps.previous_commit.outputs.commit_hash }}:versions.json | jq -r --arg service "$service" '.[$service]')
            echo "Current Version: $current_version for service: $service"
            echo "Previous Version: $previous_version for service: $service"
            
            if [[ "$current_version" != "$previous_version" ]]; then
              echo "$service" >> changed_services.txt
            fi
          done

      - name: Collect changes
        id: collect-changes
        run: |
          if [ -f changed_services.txt ]; then
            changed_services=$(jq -R -s -c 'split("\n")[:-1]' changed_services.txt)
            echo "::set-output name=changed_services::${changed_services}"
          else
            echo "::set-output name=changed_services::[]"
          fi

  process-versions:
    needs: read-and-detect-versions
    if: ${{ needs.read-and-detect-versions.outputs.changed_services != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        service: ${{ fromJson(needs.read-and-detect-versions.outputs.changed_services) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Echo Version
        run: echo "Processing ${{ matrix.service }}"

      - name: Get current version for service
        id: get-version
        run: |
          current_version=$(jq -c --arg service "${{ matrix.service }}" '.[$service]' versions.json)
          echo "::set-output name=current_version::${current_version}"

      - name: Trigger workflow in another repo
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: blank.yml
          repo: soringumeni1/multiple-env-poc
          inputs: |
            {
              "env": "preprod",
              "tag_version": ${{ steps.get-version.outputs.current_version }}
            }
          token: "${{ secrets.MY_TOKEN }}"
